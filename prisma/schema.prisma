generator zod {
  provider       = "zod-prisma-types"
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}


//Add base tables
model Member {
  member_id String @db.Uuid @id @unique
  member_name String @db.VarChar(50)
  member_password String @db.Uuid
  member_bonus_points Float @db.DoublePrecision
  member_created_date DateTime @db.Timestamp()
  member_updated_date DateTime @db.Timestamp()

  orders Order[]

  @@map(name: "member")
}

model MemberLevel {
  member_level_id String @db.Uuid @id @unique
  member_level_name String @db.VarChar(50)
  bonus_points_min Float @db.DoublePrecision
  bonus_points_max Float @db.DoublePrecision
  member_level_created_date DateTime @db.Timestamp()
  member_level_updated_date DateTime @db.Timestamp()

  @@map(name: "member_level")
}

model Uom {
  uom_id String @db.Uuid @id @unique
  uom_name String @db.VarChar(50)
  uom_created_date DateTime @db.Timestamp()
  uom_updated_date DateTime @db.Timestamp()

  products Product[]

  @@map(name: "uom")
}

model Product {
  product_id String @db.Uuid @id @unique
  product_name String @db.VarChar(50)
  uom_id String @db.Uuid
  product_unit_price Float @db.DoublePrecision
  product_bonus_points Float @db.DoublePrecision
  product_created_date DateTime @db.Timestamp()
  product_updated_date DateTime @db.Timestamp()

  fk_uom_id Uom @relation(fields: [uom_id], references: [uom_id], onDelete: Restrict, onUpdate: Restrict)
  orderItem OrderItem[]

  @@map(name: "product")
}

model Order {
  order_id String @db.Uuid @id @unique
  member_id String @db.Uuid
  order_created_date DateTime @db.Timestamp()
  order_updated_date DateTime @db.Timestamp()  

  fk_member_id Member @relation(fields: [member_id], references: [member_id], onDelete: Restrict, onUpdate: Restrict)
  orderItem OrderItem[]
  
  
  @@map(name: "order")
}

model OrderItem {
  order_item_id String @db.Uuid @id @unique
  order_id String @db.Uuid
  product_id String @db.Uuid
  order_item_quantity Float @db.DoublePrecision
  order_item_created_date DateTime @db.Timestamp()
  order_item_updated_date DateTime @db.Timestamp()

  fk_order_id Order @relation(fields: [order_id], references: [order_id], onDelete: Restrict, onUpdate: Restrict)
  fk_product_id Product @relation(fields: [product_id], references: [product_id], onDelete: Restrict, onUpdate: Restrict)

  @@map(name: "order_item")
}



//Add tables required to use NextAuth
// model Account {
//   id                 String  @id @default(cuid())
//   userId             String  @map("user_id")
//   type               String
//   provider           String
//   providerAccountId  String  @map("provider_account_id")
//   refresh_token      String?
//   access_token       String?
//   expires_at         Int?
//   token_type         String?
//   scope              String?
//   id_token           String?
//   session_state      String?
//   oauth_token_secret String?
//   oauth_token        String?

//   user User @relation(fields:[userId], references:[id], onDelete: Cascade)

//   @@unique([provider, providerAccountId])
// }

// model Session {
//   id           String   @id @default(cuid())
//   sessionToken String   @unique@map("session_token")
//   userId       String   @map("user_id")
//   expires      DateTime
//   user         User     @relation(fields:[userId], references:[id], onDelete: Cascade)
// }

// model User {
//   id            String    @id @default(cuid())
//   name          String?
//   email         String?@unique
//   emailVerified DateTime?
//   image         String?
//   posts         Post[]
//   accounts      Account[]
//   sessions      Session[]
// }

// model VerificationToken {
//   id         Int      @id @default(autoincrement())
//   identifier String
//   token      String   @unique
//   expires    DateTime

//   @@unique([identifier, token])
// }